                      | #######################################################################
                      | # Test for copying block of size 63;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f484040000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f584040000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f03f000000 | 	irmovl $63, %eax		# src and dst have 63 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f044030000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f034020000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # 赵义凯 1600013015
                      | # 
                      | # 使用了iaddl更快的实现加法
                      | # 使用了8x1循环展开，同时通过调整顺序让流水线不因数据依赖暂停
                      | # 使用条件传送代替条件转移
                      | # 
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x046: 6300         | 	xorl %eax,%eax		# count = 0;
                      | 
  0x048: 6222         | 	andl %edx,%edx		# len <= 0?
  0x04a: 712b020000   | 	jle Done		# if so, goto Done:
                      | 
  0x04f:              | Loop_0:	
  0x04f: c0f2f8ffffff | 	iaddl $-8, %edx
  0x055: 722b010000   | 	jl Remain
                      | 
  0x05a: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
  0x060: 2007         | 	rrmovl %eax, %edi
  0x062: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x068: c0f701000000 | 	iaddl $1, %edi
  0x06e: 6266         | 	andl %esi, %esi		# val <= 0?
  0x070: 2670         | 	cmovg %edi, %eax
                      | 
  0x072: 506304000000 | 	mrmovl 4(%ebx), %esi	# read val from src...
  0x078: 2007         | 	rrmovl %eax, %edi
  0x07a: 406104000000 | 	rmmovl %esi, 4(%ecx)	# ...and store it to dst
  0x080: c0f701000000 | 	iaddl $1, %edi
  0x086: 6266         | 	andl %esi, %esi		# val <= 0?
  0x088: 2670         | 	cmovg %edi, %eax
                      | 
  0x08a: 506308000000 | 	mrmovl 8(%ebx), %esi	# read val from src...
  0x090: 2007         | 	rrmovl %eax, %edi
  0x092: 406108000000 | 	rmmovl %esi, 8(%ecx)	# ...and store it to dst
  0x098: c0f701000000 | 	iaddl $1, %edi
  0x09e: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0a0: 2670         | 	cmovg %edi, %eax
                      | 
  0x0a2: 50630c000000 | 	mrmovl 12(%ebx), %esi	# read val from src...
  0x0a8: 2007         | 	rrmovl %eax, %edi
  0x0aa: 40610c000000 | 	rmmovl %esi, 12(%ecx)	# ...and store it to dst
  0x0b0: c0f701000000 | 	iaddl $1, %edi
  0x0b6: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0b8: 2670         | 	cmovg %edi, %eax
                      | 
  0x0ba: 506310000000 | 	mrmovl 16(%ebx), %esi	# read val from src...
  0x0c0: 2007         | 	rrmovl %eax, %edi
  0x0c2: 406110000000 | 	rmmovl %esi, 16(%ecx)	# ...and store it to dst
  0x0c8: c0f701000000 | 	iaddl $1, %edi
  0x0ce: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0d0: 2670         | 	cmovg %edi, %eax
                      | 
  0x0d2: 506314000000 | 	mrmovl 20(%ebx), %esi	# read val from src...
  0x0d8: 2007         | 	rrmovl %eax, %edi
  0x0da: 406114000000 | 	rmmovl %esi, 20(%ecx)	# ...and store it to dst
  0x0e0: c0f701000000 | 	iaddl $1, %edi
  0x0e6: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0e8: 2670         | 	cmovg %edi, %eax
                      | 
  0x0ea: 506318000000 | 	mrmovl 24(%ebx), %esi	# read val from src...
  0x0f0: 2007         | 	rrmovl %eax, %edi
  0x0f2: 406118000000 | 	rmmovl %esi, 24(%ecx)	# ...and store it to dst
  0x0f8: c0f701000000 | 	iaddl $1, %edi
  0x0fe: 6266         | 	andl %esi, %esi		# val <= 0?
  0x100: 2670         | 	cmovg %edi, %eax
                      | 
  0x102: 50631c000000 | 	mrmovl 28(%ebx), %esi	# read val from src...
  0x108: 2007         | 	rrmovl %eax, %edi
  0x10a: 40611c000000 | 	rmmovl %esi, 28(%ecx)	# ...and store it to dst
  0x110: c0f701000000 | 	iaddl $1, %edi
  0x116: 6266         | 	andl %esi, %esi		# val <= 0?
  0x118: 2670         | 	cmovg %edi, %eax
                      | 
  0x11a: c0f120000000 | 	iaddl $32, %ecx
  0x120: c0f320000000 | 	iaddl $32, %ebx
                      | 
  0x126: 704f000000   | 	jmp Loop_0
                      | 
  0x12b:              | Remain:
  0x12b: c0f208000000 | 	iaddl $8, %edx
  0x131: 712b020000   | 	jle Done		# if so, goto Done:
                      | 
  0x136: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
  0x13c: 2007         | 	rrmovl %eax, %edi
  0x13e: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x144: c0f701000000 | 	iaddl $1, %edi
  0x14a: 6266         | 	andl %esi, %esi		# val <= 0?
  0x14c: 2670         | 	cmovg %edi, %eax
  0x14e: c0f2ffffffff | 	iaddl $-1, %edx
  0x154: 712b020000   | 	jle Done
                      | 
  0x159: 506304000000 | 	mrmovl 4(%ebx), %esi	# read val from src...
  0x15f: 2007         | 	rrmovl %eax, %edi
  0x161: 406104000000 | 	rmmovl %esi, 4(%ecx)	# ...and store it to dst
  0x167: c0f701000000 | 	iaddl $1, %edi
  0x16d: 6266         | 	andl %esi, %esi		# val <= 0?
  0x16f: 2670         | 	cmovg %edi, %eax
  0x171: c0f2ffffffff | 	iaddl $-1, %edx
  0x177: 712b020000   | 	jle Done
                      | 
  0x17c: 506308000000 | 	mrmovl 8(%ebx), %esi	# read val from src...
  0x182: 2007         | 	rrmovl %eax, %edi
  0x184: 406108000000 | 	rmmovl %esi, 8(%ecx)	# ...and store it to dst
  0x18a: c0f701000000 | 	iaddl $1, %edi
  0x190: 6266         | 	andl %esi, %esi		# val <= 0?
  0x192: 2670         | 	cmovg %edi, %eax
  0x194: c0f2ffffffff | 	iaddl $-1, %edx
  0x19a: 712b020000   | 	jle Done
                      | 
  0x19f: 50630c000000 | 	mrmovl 12(%ebx), %esi	# read val from src...
  0x1a5: 2007         | 	rrmovl %eax, %edi
  0x1a7: 40610c000000 | 	rmmovl %esi, 12(%ecx)	# ...and store it to dst
  0x1ad: c0f701000000 | 	iaddl $1, %edi
  0x1b3: 6266         | 	andl %esi, %esi		# val <= 0?
  0x1b5: 2670         | 	cmovg %edi, %eax
  0x1b7: c0f2ffffffff | 	iaddl $-1, %edx
  0x1bd: 712b020000   | 	jle Done
                      | 
  0x1c2: 506310000000 | 	mrmovl 16(%ebx), %esi	# read val from src...
  0x1c8: 2007         | 	rrmovl %eax, %edi
  0x1ca: 406110000000 | 	rmmovl %esi, 16(%ecx)	# ...and store it to dst
  0x1d0: c0f701000000 | 	iaddl $1, %edi
  0x1d6: 6266         | 	andl %esi, %esi		# val <= 0?
  0x1d8: 2670         | 	cmovg %edi, %eax
  0x1da: c0f2ffffffff | 	iaddl $-1, %edx
  0x1e0: 712b020000   | 	jle Done
                      | 
  0x1e5: 506314000000 | 	mrmovl 20(%ebx), %esi	# read val from src...
  0x1eb: 2007         | 	rrmovl %eax, %edi
  0x1ed: 406114000000 | 	rmmovl %esi, 20(%ecx)	# ...and store it to dst
  0x1f3: c0f701000000 | 	iaddl $1, %edi
  0x1f9: 6266         | 	andl %esi, %esi		# val <= 0?
  0x1fb: 2670         | 	cmovg %edi, %eax
  0x1fd: c0f2ffffffff | 	iaddl $-1, %edx
  0x203: 712b020000   | 	jle Done
                      | 
  0x208: 506318000000 | 	mrmovl 24(%ebx), %esi	# read val from src...
  0x20e: 2007         | 	rrmovl %eax, %edi
  0x210: 406118000000 | 	rmmovl %esi, 24(%ecx)	# ...and store it to dst
  0x216: c0f701000000 | 	iaddl $1, %edi
  0x21c: 6266         | 	andl %esi, %esi		# val <= 0?
  0x21e: 2670         | 	cmovg %edi, %eax
  0x220: c0f2ffffffff | 	iaddl $-1, %edx
  0x226: 712b020000   | 	jle Done
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x22b:              | Done:
  0x22b: b07f         | 	popl %edi               # Restore callee-save registers
  0x22d: b03f         | 	popl %ebx
  0x22f: b06f         | 	popl %esi
                      | 
  0x231: d0           | 	leave
  0x232: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x233:              | End:
                      | #/* $end ncopy-ys */
  0x233:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x234:              | 	.align 4
  0x234:              | src:
  0x234: ffffffff     | 	.long -1
  0x238: 02000000     | 	.long 2
  0x23c: 03000000     | 	.long 3
  0x240: 00000000     | 	.long 0
  0x244: 05000000     | 	.long 5
  0x248: 00000000     | 	.long 0
  0x24c: 07000000     | 	.long 7
  0x250: 08000000     | 	.long 8
  0x254: 09000000     | 	.long 9
  0x258: f6ffffff     | 	.long -10
  0x25c: f5ffffff     | 	.long -11
  0x260: 0c000000     | 	.long 12
  0x264: 0d000000     | 	.long 13
  0x268: f2ffffff     | 	.long -14
  0x26c: 00000000     | 	.long 0
  0x270: f0ffffff     | 	.long -16
  0x274: 11000000     | 	.long 17
  0x278: eeffffff     | 	.long -18
  0x27c: edffffff     | 	.long -19
  0x280: ecffffff     | 	.long -20
  0x284: 00000000     | 	.long 0
  0x288: 00000000     | 	.long 0
  0x28c: 17000000     | 	.long 23
  0x290: e8ffffff     | 	.long -24
  0x294: e7ffffff     | 	.long -25
  0x298: e6ffffff     | 	.long -26
  0x29c: 1b000000     | 	.long 27
  0x2a0: 00000000     | 	.long 0
  0x2a4: e3ffffff     | 	.long -29
  0x2a8: 1e000000     | 	.long 30
  0x2ac: e1ffffff     | 	.long -31
  0x2b0: e0ffffff     | 	.long -32
  0x2b4: 21000000     | 	.long 33
  0x2b8: 22000000     | 	.long 34
  0x2bc: 23000000     | 	.long 35
  0x2c0: 24000000     | 	.long 36
  0x2c4: 25000000     | 	.long 37
  0x2c8: daffffff     | 	.long -38
  0x2cc: 27000000     | 	.long 39
  0x2d0: 28000000     | 	.long 40
  0x2d4: 29000000     | 	.long 41
  0x2d8: d6ffffff     | 	.long -42
  0x2dc: 2b000000     | 	.long 43
  0x2e0: 2c000000     | 	.long 44
  0x2e4: d3ffffff     | 	.long -45
  0x2e8: 2e000000     | 	.long 46
  0x2ec: 2f000000     | 	.long 47
  0x2f0: 30000000     | 	.long 48
  0x2f4: cfffffff     | 	.long -49
  0x2f8: ceffffff     | 	.long -50
  0x2fc: cdffffff     | 	.long -51
  0x300: 34000000     | 	.long 52
  0x304: cbffffff     | 	.long -53
  0x308: 36000000     | 	.long 54
  0x30c: 37000000     | 	.long 55
  0x310: 38000000     | 	.long 56
  0x314: c7ffffff     | 	.long -57
  0x318: c6ffffff     | 	.long -58
  0x31c: 3b000000     | 	.long 59
  0x320: 3c000000     | 	.long 60
  0x324: 00000000     | 	.long 0
  0x328: c2ffffff     | 	.long -62
  0x32c: c1ffffff     | 	.long -63
  0x330: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x340:              | 	.align 16
  0x340:              | Predest:
  0x340: fadebc00     | 	.long 0xbcdefa
  0x344:              | dest:
  0x344: abefcd00     | 	.long 0xcdefab
  0x348: abefcd00     | 	.long 0xcdefab
  0x34c: abefcd00     | 	.long 0xcdefab
  0x350: abefcd00     | 	.long 0xcdefab
  0x354: abefcd00     | 	.long 0xcdefab
  0x358: abefcd00     | 	.long 0xcdefab
  0x35c: abefcd00     | 	.long 0xcdefab
  0x360: abefcd00     | 	.long 0xcdefab
  0x364: abefcd00     | 	.long 0xcdefab
  0x368: abefcd00     | 	.long 0xcdefab
  0x36c: abefcd00     | 	.long 0xcdefab
  0x370: abefcd00     | 	.long 0xcdefab
  0x374: abefcd00     | 	.long 0xcdefab
  0x378: abefcd00     | 	.long 0xcdefab
  0x37c: abefcd00     | 	.long 0xcdefab
  0x380: abefcd00     | 	.long 0xcdefab
  0x384: abefcd00     | 	.long 0xcdefab
  0x388: abefcd00     | 	.long 0xcdefab
  0x38c: abefcd00     | 	.long 0xcdefab
  0x390: abefcd00     | 	.long 0xcdefab
  0x394: abefcd00     | 	.long 0xcdefab
  0x398: abefcd00     | 	.long 0xcdefab
  0x39c: abefcd00     | 	.long 0xcdefab
  0x3a0: abefcd00     | 	.long 0xcdefab
  0x3a4: abefcd00     | 	.long 0xcdefab
  0x3a8: abefcd00     | 	.long 0xcdefab
  0x3ac: abefcd00     | 	.long 0xcdefab
  0x3b0: abefcd00     | 	.long 0xcdefab
  0x3b4: abefcd00     | 	.long 0xcdefab
  0x3b8: abefcd00     | 	.long 0xcdefab
  0x3bc: abefcd00     | 	.long 0xcdefab
  0x3c0: abefcd00     | 	.long 0xcdefab
  0x3c4: abefcd00     | 	.long 0xcdefab
  0x3c8: abefcd00     | 	.long 0xcdefab
  0x3cc: abefcd00     | 	.long 0xcdefab
  0x3d0: abefcd00     | 	.long 0xcdefab
  0x3d4: abefcd00     | 	.long 0xcdefab
  0x3d8: abefcd00     | 	.long 0xcdefab
  0x3dc: abefcd00     | 	.long 0xcdefab
  0x3e0: abefcd00     | 	.long 0xcdefab
  0x3e4: abefcd00     | 	.long 0xcdefab
  0x3e8: abefcd00     | 	.long 0xcdefab
  0x3ec: abefcd00     | 	.long 0xcdefab
  0x3f0: abefcd00     | 	.long 0xcdefab
  0x3f4: abefcd00     | 	.long 0xcdefab
  0x3f8: abefcd00     | 	.long 0xcdefab
  0x3fc: abefcd00     | 	.long 0xcdefab
  0x400: abefcd00     | 	.long 0xcdefab
  0x404: abefcd00     | 	.long 0xcdefab
  0x408: abefcd00     | 	.long 0xcdefab
  0x40c: abefcd00     | 	.long 0xcdefab
  0x410: abefcd00     | 	.long 0xcdefab
  0x414: abefcd00     | 	.long 0xcdefab
  0x418: abefcd00     | 	.long 0xcdefab
  0x41c: abefcd00     | 	.long 0xcdefab
  0x420: abefcd00     | 	.long 0xcdefab
  0x424: abefcd00     | 	.long 0xcdefab
  0x428: abefcd00     | 	.long 0xcdefab
  0x42c: abefcd00     | 	.long 0xcdefab
  0x430: abefcd00     | 	.long 0xcdefab
  0x434: abefcd00     | 	.long 0xcdefab
  0x438: abefcd00     | 	.long 0xcdefab
  0x43c: abefcd00     | 	.long 0xcdefab
  0x440:              | Postdest:
  0x440: bcfade00     | 	.long 0xdefabc
                      | 
  0x444:              | .align 4
                      | # Run time stack
  0x444: 00000000     | 	.long 0
  0x448: 00000000     | 	.long 0
  0x44c: 00000000     | 	.long 0
  0x450: 00000000     | 	.long 0
  0x454: 00000000     | 	.long 0
  0x458: 00000000     | 	.long 0
  0x45c: 00000000     | 	.long 0
  0x460: 00000000     | 	.long 0
  0x464: 00000000     | 	.long 0
  0x468: 00000000     | 	.long 0
  0x46c: 00000000     | 	.long 0
  0x470: 00000000     | 	.long 0
  0x474: 00000000     | 	.long 0
  0x478: 00000000     | 	.long 0
  0x47c: 00000000     | 	.long 0
  0x480: 00000000     | 	.long 0
                      | 
  0x484:              | Stack:
