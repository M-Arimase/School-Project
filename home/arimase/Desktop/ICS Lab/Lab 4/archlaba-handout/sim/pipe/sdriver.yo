                      | #######################################################################
                      | # Test for copying block of size 4;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f4c8020000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f5c8020000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f004000000 | 	irmovl $4, %eax		# src and dst have 4 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f074020000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f050020000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x046: 6300         | 	xorl %eax,%eax		# count = 0;
                      | 
  0x048: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
                      | 
  0x04e: 6222         | 	andl %edx,%edx		# len <= 0?
  0x050: 7144020000   | 	jle Done		# if so, goto Done:
                      | 
  0x055:              | Loop:	
  0x055: 2027         | 	rrmovl %edx, %edi
  0x057: c0f7f8ffffff | 	iaddl $-8, %edi
  0x05d: 7241010000   | 	jl Remain
  0x062: c0f2f8ffffff | 	iaddl $-8, %edx
                      | 
                      | 	
  0x068: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x06e: 6266         | 	andl %esi, %esi		# val <= 0?
  0x070: 506304000000 | 	mrmovl 4(%ebx), %esi	# read val from src...
  0x076: 7181000000   | 	jle Npos_1		# if so, goto Npos:
  0x07b: c0f001000000 | 	iaddl $1, %eax		# count++
  0x081:              | Npos_1:	
                      | 
                      | 
  0x081: 406104000000 | 	rmmovl %esi, 4(%ecx)	# ...and store it to dst
  0x087: 6266         | 	andl %esi, %esi		# val <= 0?
  0x089: 506308000000 | 	mrmovl 8(%ebx), %esi	# read val from src...
  0x08f: 719a000000   | 	jle Npos_2		# if so, goto Npos:
  0x094: c0f001000000 | 	iaddl $1, %eax		# count++
  0x09a:              | Npos_2:	
                      | 
                      | 
  0x09a: 406108000000 | 	rmmovl %esi, 8(%ecx)	# ...and store it to dst
  0x0a0: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0a2: 50630c000000 | 	mrmovl 12(%ebx), %esi	# read val from src...
  0x0a8: 71b3000000   | 	jle Npos_3		# if so, goto Npos:
  0x0ad: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0b3:              | Npos_3:	
                      | 
                      | 
  0x0b3: 40610c000000 | 	rmmovl %esi, 12(%ecx)	# ...and store it to dst
  0x0b9: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0bb: 506310000000 | 	mrmovl 16(%ebx), %esi	# read val from src...
  0x0c1: 71cc000000   | 	jle Npos_4		# if so, goto Npos:
  0x0c6: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0cc:              | Npos_4:	
                      | 
                      | 
  0x0cc: 406110000000 | 	rmmovl %esi, 16(%ecx)	# ...and store it to dst
  0x0d2: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0d4: 506314000000 | 	mrmovl 20(%ebx), %esi	# read val from src...
  0x0da: 71e5000000   | 	jle Npos_5		# if so, goto Npos:
  0x0df: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0e5:              | Npos_5:	
                      | 
                      | 
  0x0e5: 406114000000 | 	rmmovl %esi, 20(%ecx)	# ...and store it to dst
  0x0eb: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0ed: 506318000000 | 	mrmovl 24(%ebx), %esi	# read val from src...
  0x0f3: 71fe000000   | 	jle Npos_6		# if so, goto Npos:
  0x0f8: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0fe:              | Npos_6:	
                      | 
                      | 
  0x0fe: 406118000000 | 	rmmovl %esi, 24(%ecx)	# ...and store it to dst
  0x104: 6266         | 	andl %esi, %esi		# val <= 0?
  0x106: 50631c000000 | 	mrmovl 28(%ebx), %esi	# read val from src...
  0x10c: 7117010000   | 	jle Npos_7		# if so, goto Npos:
  0x111: c0f001000000 | 	iaddl $1, %eax		# count++
  0x117:              | Npos_7:	
                      | 
                      | 
  0x117: 40611c000000 | 	rmmovl %esi, 28(%ecx)	# ...and store it to dst
  0x11d: 6266         | 	andl %esi, %esi		# val <= 0?
  0x11f: 506320000000 | 	mrmovl 32(%ebx), %esi	# read val from src...
  0x125: 7130010000   | 	jle Npos_8		# if so, goto Npos:
  0x12a: c0f001000000 | 	iaddl $1, %eax		# count++
  0x130:              | Npos_8:	
                      | 
                      | 
  0x130: c0f120000000 | 	iaddl $32, %ecx
  0x136: c0f320000000 | 	iaddl $32, %ebx
                      | 
  0x13c: 7055000000   | 	jmp Loop
                      | 
  0x141:              | Remain:
  0x141: 6222         | 	andl %edx,%edx		# len <= 0?
  0x143: 7144020000   | 	jle Done		# if so, goto Done:
                      | 
                      | 
  0x148: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x14e: 6266         | 	andl %esi, %esi		# val <= 0?
  0x150: 506304000000 | 	mrmovl 4(%ebx), %esi	# read val from src...
  0x156: 7161010000   | 	jle R_Npos_1		# if so, goto Npos:
  0x15b: c0f001000000 | 	iaddl $1, %eax		# count++
  0x161:              | R_Npos_1:	
  0x161: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x167: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | 
  0x16c: 406104000000 | 	rmmovl %esi, 4(%ecx)	# ...and store it to dst
  0x172: 6266         | 	andl %esi, %esi		# val <= 0?
  0x174: 506308000000 | 	mrmovl 8(%ebx), %esi	# read val from src...
  0x17a: 7185010000   | 	jle R_Npos_2		# if so, goto Npos:
  0x17f: c0f001000000 | 	iaddl $1, %eax		# count++
  0x185:              | R_Npos_2:	
  0x185: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x18b: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | 
  0x190: 406108000000 | 	rmmovl %esi, 8(%ecx)	# ...and store it to dst
  0x196: 6266         | 	andl %esi, %esi		# val <= 0?
  0x198: 50630c000000 | 	mrmovl 12(%ebx), %esi	# read val from src...
  0x19e: 71a9010000   | 	jle R_Npos_3		# if so, goto Npos:
  0x1a3: c0f001000000 | 	iaddl $1, %eax		# count++
  0x1a9:              | R_Npos_3:	
  0x1a9: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x1af: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | 
  0x1b4: 40610c000000 | 	rmmovl %esi, 12(%ecx)	# ...and store it to dst
  0x1ba: 6266         | 	andl %esi, %esi		# val <= 0?
  0x1bc: 506310000000 | 	mrmovl 16(%ebx), %esi	# read val from src...
  0x1c2: 71cd010000   | 	jle R_Npos_4		# if so, goto Npos:
  0x1c7: c0f001000000 | 	iaddl $1, %eax		# count++
  0x1cd:              | R_Npos_4:	
  0x1cd: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x1d3: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | 
  0x1d8: 406110000000 | 	rmmovl %esi, 16(%ecx)	# ...and store it to dst
  0x1de: 6266         | 	andl %esi, %esi		# val <= 0?
  0x1e0: 506314000000 | 	mrmovl 20(%ebx), %esi	# read val from src...
  0x1e6: 71f1010000   | 	jle R_Npos_5		# if so, goto Npos:
  0x1eb: c0f001000000 | 	iaddl $1, %eax		# count++
  0x1f1:              | R_Npos_5:	
  0x1f1: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x1f7: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | 
  0x1fc: 406114000000 | 	rmmovl %esi, 20(%ecx)	# ...and store it to dst
  0x202: 6266         | 	andl %esi, %esi		# val <= 0?
  0x204: 506318000000 | 	mrmovl 24(%ebx), %esi	# read val from src...
  0x20a: 7115020000   | 	jle R_Npos_6		# if so, goto Npos:
  0x20f: c0f001000000 | 	iaddl $1, %eax		# count++
  0x215:              | R_Npos_6:	
  0x215: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x21b: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | 
  0x220: 406118000000 | 	rmmovl %esi, 24(%ecx)	# ...and store it to dst
  0x226: 6266         | 	andl %esi, %esi		# val <= 0?
  0x228: 50631c000000 | 	mrmovl 28(%ebx), %esi	# read val from src...
  0x22e: 7139020000   | 	jle R_Npos_7		# if so, goto Npos:
  0x233: c0f001000000 | 	iaddl $1, %eax		# count++
  0x239:              | R_Npos_7:	
  0x239: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x23f: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x244:              | Done:
  0x244: b07f         | 	popl %edi               # Restore callee-save registers
  0x246: b03f         | 	popl %ebx
  0x248: b06f         | 	popl %esi
  0x24a: 2054         | 	rrmovl %ebp, %esp
  0x24c: b05f         | 	popl %ebp
  0x24e: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x24f:              | End:
                      | #/* $end ncopy-ys */
  0x24f:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x250:              | 	.align 4
  0x250:              | src:
  0x250: 01000000     | 	.long 1
  0x254: 00000000     | 	.long 0
  0x258: fdffffff     | 	.long -3
  0x25c: 04000000     | 	.long 4
  0x260: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x270:              | 	.align 16
  0x270:              | Predest:
  0x270: fadebc00     | 	.long 0xbcdefa
  0x274:              | dest:
  0x274: abefcd00     | 	.long 0xcdefab
  0x278: abefcd00     | 	.long 0xcdefab
  0x27c: abefcd00     | 	.long 0xcdefab
  0x280: abefcd00     | 	.long 0xcdefab
  0x284:              | Postdest:
  0x284: bcfade00     | 	.long 0xdefabc
                      | 
  0x288:              | .align 4
                      | # Run time stack
  0x288: 00000000     | 	.long 0
  0x28c: 00000000     | 	.long 0
  0x290: 00000000     | 	.long 0
  0x294: 00000000     | 	.long 0
  0x298: 00000000     | 	.long 0
  0x29c: 00000000     | 	.long 0
  0x2a0: 00000000     | 	.long 0
  0x2a4: 00000000     | 	.long 0
  0x2a8: 00000000     | 	.long 0
  0x2ac: 00000000     | 	.long 0
  0x2b0: 00000000     | 	.long 0
  0x2b4: 00000000     | 	.long 0
  0x2b8: 00000000     | 	.long 0
  0x2bc: 00000000     | 	.long 0
  0x2c0: 00000000     | 	.long 0
  0x2c4: 00000000     | 	.long 0
                      | 
  0x2c8:              | Stack:
