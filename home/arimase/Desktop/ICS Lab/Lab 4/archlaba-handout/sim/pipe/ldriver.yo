                      | #######################################################################
                      | # Test for copying block of size 63;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f494040000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f594040000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f03f000000 | 	irmovl $63, %eax		# src and dst have 63 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f054030000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f050020000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x046: 6300         | 	xorl %eax,%eax		# count = 0;
                      | 
  0x048: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
                      | 
  0x04e: 6222         | 	andl %edx,%edx		# len <= 0?
  0x050: 7144020000   | 	jle Done		# if so, goto Done:
                      | 
  0x055:              | Loop:	
  0x055: 2027         | 	rrmovl %edx, %edi
  0x057: c0f7f8ffffff | 	iaddl $-8, %edi
  0x05d: 7241010000   | 	jl Remain
  0x062: c0f2f8ffffff | 	iaddl $-8, %edx
                      | 
                      | 	
  0x068: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x06e: 6266         | 	andl %esi, %esi		# val <= 0?
  0x070: 506304000000 | 	mrmovl 4(%ebx), %esi	# read val from src...
  0x076: 7181000000   | 	jle Npos_1		# if so, goto Npos:
  0x07b: c0f001000000 | 	iaddl $1, %eax		# count++
  0x081:              | Npos_1:	
                      | 
                      | 
  0x081: 406104000000 | 	rmmovl %esi, 4(%ecx)	# ...and store it to dst
  0x087: 6266         | 	andl %esi, %esi		# val <= 0?
  0x089: 506308000000 | 	mrmovl 8(%ebx), %esi	# read val from src...
  0x08f: 719a000000   | 	jle Npos_2		# if so, goto Npos:
  0x094: c0f001000000 | 	iaddl $1, %eax		# count++
  0x09a:              | Npos_2:	
                      | 
                      | 
  0x09a: 406108000000 | 	rmmovl %esi, 8(%ecx)	# ...and store it to dst
  0x0a0: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0a2: 50630c000000 | 	mrmovl 12(%ebx), %esi	# read val from src...
  0x0a8: 71b3000000   | 	jle Npos_3		# if so, goto Npos:
  0x0ad: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0b3:              | Npos_3:	
                      | 
                      | 
  0x0b3: 40610c000000 | 	rmmovl %esi, 12(%ecx)	# ...and store it to dst
  0x0b9: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0bb: 506310000000 | 	mrmovl 16(%ebx), %esi	# read val from src...
  0x0c1: 71cc000000   | 	jle Npos_4		# if so, goto Npos:
  0x0c6: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0cc:              | Npos_4:	
                      | 
                      | 
  0x0cc: 406110000000 | 	rmmovl %esi, 16(%ecx)	# ...and store it to dst
  0x0d2: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0d4: 506314000000 | 	mrmovl 20(%ebx), %esi	# read val from src...
  0x0da: 71e5000000   | 	jle Npos_5		# if so, goto Npos:
  0x0df: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0e5:              | Npos_5:	
                      | 
                      | 
  0x0e5: 406114000000 | 	rmmovl %esi, 20(%ecx)	# ...and store it to dst
  0x0eb: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0ed: 506318000000 | 	mrmovl 24(%ebx), %esi	# read val from src...
  0x0f3: 71fe000000   | 	jle Npos_6		# if so, goto Npos:
  0x0f8: c0f001000000 | 	iaddl $1, %eax		# count++
  0x0fe:              | Npos_6:	
                      | 
                      | 
  0x0fe: 406118000000 | 	rmmovl %esi, 24(%ecx)	# ...and store it to dst
  0x104: 6266         | 	andl %esi, %esi		# val <= 0?
  0x106: 50631c000000 | 	mrmovl 28(%ebx), %esi	# read val from src...
  0x10c: 7117010000   | 	jle Npos_7		# if so, goto Npos:
  0x111: c0f001000000 | 	iaddl $1, %eax		# count++
  0x117:              | Npos_7:	
                      | 
                      | 
  0x117: 40611c000000 | 	rmmovl %esi, 28(%ecx)	# ...and store it to dst
  0x11d: 6266         | 	andl %esi, %esi		# val <= 0?
  0x11f: 506320000000 | 	mrmovl 32(%ebx), %esi	# read val from src...
  0x125: 7130010000   | 	jle Npos_8		# if so, goto Npos:
  0x12a: c0f001000000 | 	iaddl $1, %eax		# count++
  0x130:              | Npos_8:	
                      | 
                      | 
  0x130: c0f120000000 | 	iaddl $32, %ecx
  0x136: c0f320000000 | 	iaddl $32, %ebx
                      | 
  0x13c: 7055000000   | 	jmp Loop
                      | 
  0x141:              | Remain:
  0x141: 6222         | 	andl %edx,%edx		# len <= 0?
  0x143: 7144020000   | 	jle Done		# if so, goto Done:
                      | 
                      | 
  0x148: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x14e: 6266         | 	andl %esi, %esi		# val <= 0?
  0x150: 506304000000 | 	mrmovl 4(%ebx), %esi	# read val from src...
  0x156: 7161010000   | 	jle R_Npos_1		# if so, goto Npos:
  0x15b: c0f001000000 | 	iaddl $1, %eax		# count++
  0x161:              | R_Npos_1:	
  0x161: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x167: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | 
  0x16c: 406104000000 | 	rmmovl %esi, 4(%ecx)	# ...and store it to dst
  0x172: 6266         | 	andl %esi, %esi		# val <= 0?
  0x174: 506308000000 | 	mrmovl 8(%ebx), %esi	# read val from src...
  0x17a: 7185010000   | 	jle R_Npos_2		# if so, goto Npos:
  0x17f: c0f001000000 | 	iaddl $1, %eax		# count++
  0x185:              | R_Npos_2:	
  0x185: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x18b: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | 
  0x190: 406108000000 | 	rmmovl %esi, 8(%ecx)	# ...and store it to dst
  0x196: 6266         | 	andl %esi, %esi		# val <= 0?
  0x198: 50630c000000 | 	mrmovl 12(%ebx), %esi	# read val from src...
  0x19e: 71a9010000   | 	jle R_Npos_3		# if so, goto Npos:
  0x1a3: c0f001000000 | 	iaddl $1, %eax		# count++
  0x1a9:              | R_Npos_3:	
  0x1a9: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x1af: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | 
  0x1b4: 40610c000000 | 	rmmovl %esi, 12(%ecx)	# ...and store it to dst
  0x1ba: 6266         | 	andl %esi, %esi		# val <= 0?
  0x1bc: 506310000000 | 	mrmovl 16(%ebx), %esi	# read val from src...
  0x1c2: 71cd010000   | 	jle R_Npos_4		# if so, goto Npos:
  0x1c7: c0f001000000 | 	iaddl $1, %eax		# count++
  0x1cd:              | R_Npos_4:	
  0x1cd: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x1d3: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | 
  0x1d8: 406110000000 | 	rmmovl %esi, 16(%ecx)	# ...and store it to dst
  0x1de: 6266         | 	andl %esi, %esi		# val <= 0?
  0x1e0: 506314000000 | 	mrmovl 20(%ebx), %esi	# read val from src...
  0x1e6: 71f1010000   | 	jle R_Npos_5		# if so, goto Npos:
  0x1eb: c0f001000000 | 	iaddl $1, %eax		# count++
  0x1f1:              | R_Npos_5:	
  0x1f1: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x1f7: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | 
  0x1fc: 406114000000 | 	rmmovl %esi, 20(%ecx)	# ...and store it to dst
  0x202: 6266         | 	andl %esi, %esi		# val <= 0?
  0x204: 506318000000 | 	mrmovl 24(%ebx), %esi	# read val from src...
  0x20a: 7115020000   | 	jle R_Npos_6		# if so, goto Npos:
  0x20f: c0f001000000 | 	iaddl $1, %eax		# count++
  0x215:              | R_Npos_6:	
  0x215: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x21b: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | 
  0x220: 406118000000 | 	rmmovl %esi, 24(%ecx)	# ...and store it to dst
  0x226: 6266         | 	andl %esi, %esi		# val <= 0?
  0x228: 50631c000000 | 	mrmovl 28(%ebx), %esi	# read val from src...
  0x22e: 7139020000   | 	jle R_Npos_7		# if so, goto Npos:
  0x233: c0f001000000 | 	iaddl $1, %eax		# count++
  0x239:              | R_Npos_7:	
  0x239: c0f2ffffffff | 	iaddl $-1, %edx		# len--
  0x23f: 7144020000   | 	jle Done		# if so, goto Loop:
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x244:              | Done:
  0x244: b07f         | 	popl %edi               # Restore callee-save registers
  0x246: b03f         | 	popl %ebx
  0x248: b06f         | 	popl %esi
  0x24a: 2054         | 	rrmovl %ebp, %esp
  0x24c: b05f         | 	popl %ebp
  0x24e: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x24f:              | End:
                      | #/* $end ncopy-ys */
  0x24f:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x250:              | 	.align 4
  0x250:              | src:
  0x250: ffffffff     | 	.long -1
  0x254: 00000000     | 	.long 0
  0x258: 03000000     | 	.long 3
  0x25c: 04000000     | 	.long 4
  0x260: 00000000     | 	.long 0
  0x264: 06000000     | 	.long 6
  0x268: 07000000     | 	.long 7
  0x26c: 08000000     | 	.long 8
  0x270: f7ffffff     | 	.long -9
  0x274: 0a000000     | 	.long 10
  0x278: 0b000000     | 	.long 11
  0x27c: 0c000000     | 	.long 12
  0x280: f3ffffff     | 	.long -13
  0x284: 0e000000     | 	.long 14
  0x288: f1ffffff     | 	.long -15
  0x28c: f0ffffff     | 	.long -16
  0x290: efffffff     | 	.long -17
  0x294: eeffffff     | 	.long -18
  0x298: 13000000     | 	.long 19
  0x29c: 14000000     | 	.long 20
  0x2a0: 15000000     | 	.long 21
  0x2a4: eaffffff     | 	.long -22
  0x2a8: 17000000     | 	.long 23
  0x2ac: 18000000     | 	.long 24
  0x2b0: 19000000     | 	.long 25
  0x2b4: e6ffffff     | 	.long -26
  0x2b8: e5ffffff     | 	.long -27
  0x2bc: e4ffffff     | 	.long -28
  0x2c0: 1d000000     | 	.long 29
  0x2c4: 1e000000     | 	.long 30
  0x2c8: e1ffffff     | 	.long -31
  0x2cc: 20000000     | 	.long 32
  0x2d0: dfffffff     | 	.long -33
  0x2d4: 22000000     | 	.long 34
  0x2d8: 23000000     | 	.long 35
  0x2dc: 24000000     | 	.long 36
  0x2e0: 25000000     | 	.long 37
  0x2e4: daffffff     | 	.long -38
  0x2e8: d9ffffff     | 	.long -39
  0x2ec: 28000000     | 	.long 40
  0x2f0: 29000000     | 	.long 41
  0x2f4: d6ffffff     | 	.long -42
  0x2f8: 2b000000     | 	.long 43
  0x2fc: d4ffffff     | 	.long -44
  0x300: d3ffffff     | 	.long -45
  0x304: d2ffffff     | 	.long -46
  0x308: d1ffffff     | 	.long -47
  0x30c: 30000000     | 	.long 48
  0x310: cfffffff     | 	.long -49
  0x314: 00000000     | 	.long 0
  0x318: 33000000     | 	.long 51
  0x31c: ccffffff     | 	.long -52
  0x320: 35000000     | 	.long 53
  0x324: 36000000     | 	.long 54
  0x328: c9ffffff     | 	.long -55
  0x32c: c8ffffff     | 	.long -56
  0x330: 00000000     | 	.long 0
  0x334: 3a000000     | 	.long 58
  0x338: 3b000000     | 	.long 59
  0x33c: 00000000     | 	.long 0
  0x340: 00000000     | 	.long 0
  0x344: c2ffffff     | 	.long -62
  0x348: c1ffffff     | 	.long -63
  0x34c: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x350:              | 	.align 16
  0x350:              | Predest:
  0x350: fadebc00     | 	.long 0xbcdefa
  0x354:              | dest:
  0x354: abefcd00     | 	.long 0xcdefab
  0x358: abefcd00     | 	.long 0xcdefab
  0x35c: abefcd00     | 	.long 0xcdefab
  0x360: abefcd00     | 	.long 0xcdefab
  0x364: abefcd00     | 	.long 0xcdefab
  0x368: abefcd00     | 	.long 0xcdefab
  0x36c: abefcd00     | 	.long 0xcdefab
  0x370: abefcd00     | 	.long 0xcdefab
  0x374: abefcd00     | 	.long 0xcdefab
  0x378: abefcd00     | 	.long 0xcdefab
  0x37c: abefcd00     | 	.long 0xcdefab
  0x380: abefcd00     | 	.long 0xcdefab
  0x384: abefcd00     | 	.long 0xcdefab
  0x388: abefcd00     | 	.long 0xcdefab
  0x38c: abefcd00     | 	.long 0xcdefab
  0x390: abefcd00     | 	.long 0xcdefab
  0x394: abefcd00     | 	.long 0xcdefab
  0x398: abefcd00     | 	.long 0xcdefab
  0x39c: abefcd00     | 	.long 0xcdefab
  0x3a0: abefcd00     | 	.long 0xcdefab
  0x3a4: abefcd00     | 	.long 0xcdefab
  0x3a8: abefcd00     | 	.long 0xcdefab
  0x3ac: abefcd00     | 	.long 0xcdefab
  0x3b0: abefcd00     | 	.long 0xcdefab
  0x3b4: abefcd00     | 	.long 0xcdefab
  0x3b8: abefcd00     | 	.long 0xcdefab
  0x3bc: abefcd00     | 	.long 0xcdefab
  0x3c0: abefcd00     | 	.long 0xcdefab
  0x3c4: abefcd00     | 	.long 0xcdefab
  0x3c8: abefcd00     | 	.long 0xcdefab
  0x3cc: abefcd00     | 	.long 0xcdefab
  0x3d0: abefcd00     | 	.long 0xcdefab
  0x3d4: abefcd00     | 	.long 0xcdefab
  0x3d8: abefcd00     | 	.long 0xcdefab
  0x3dc: abefcd00     | 	.long 0xcdefab
  0x3e0: abefcd00     | 	.long 0xcdefab
  0x3e4: abefcd00     | 	.long 0xcdefab
  0x3e8: abefcd00     | 	.long 0xcdefab
  0x3ec: abefcd00     | 	.long 0xcdefab
  0x3f0: abefcd00     | 	.long 0xcdefab
  0x3f4: abefcd00     | 	.long 0xcdefab
  0x3f8: abefcd00     | 	.long 0xcdefab
  0x3fc: abefcd00     | 	.long 0xcdefab
  0x400: abefcd00     | 	.long 0xcdefab
  0x404: abefcd00     | 	.long 0xcdefab
  0x408: abefcd00     | 	.long 0xcdefab
  0x40c: abefcd00     | 	.long 0xcdefab
  0x410: abefcd00     | 	.long 0xcdefab
  0x414: abefcd00     | 	.long 0xcdefab
  0x418: abefcd00     | 	.long 0xcdefab
  0x41c: abefcd00     | 	.long 0xcdefab
  0x420: abefcd00     | 	.long 0xcdefab
  0x424: abefcd00     | 	.long 0xcdefab
  0x428: abefcd00     | 	.long 0xcdefab
  0x42c: abefcd00     | 	.long 0xcdefab
  0x430: abefcd00     | 	.long 0xcdefab
  0x434: abefcd00     | 	.long 0xcdefab
  0x438: abefcd00     | 	.long 0xcdefab
  0x43c: abefcd00     | 	.long 0xcdefab
  0x440: abefcd00     | 	.long 0xcdefab
  0x444: abefcd00     | 	.long 0xcdefab
  0x448: abefcd00     | 	.long 0xcdefab
  0x44c: abefcd00     | 	.long 0xcdefab
  0x450:              | Postdest:
  0x450: bcfade00     | 	.long 0xdefabc
                      | 
  0x454:              | .align 4
                      | # Run time stack
  0x454: 00000000     | 	.long 0
  0x458: 00000000     | 	.long 0
  0x45c: 00000000     | 	.long 0
  0x460: 00000000     | 	.long 0
  0x464: 00000000     | 	.long 0
  0x468: 00000000     | 	.long 0
  0x46c: 00000000     | 	.long 0
  0x470: 00000000     | 	.long 0
  0x474: 00000000     | 	.long 0
  0x478: 00000000     | 	.long 0
  0x47c: 00000000     | 	.long 0
  0x480: 00000000     | 	.long 0
  0x484: 00000000     | 	.long 0
  0x488: 00000000     | 	.long 0
  0x48c: 00000000     | 	.long 0
  0x490: 00000000     | 	.long 0
                      | 
  0x494:              | Stack:
